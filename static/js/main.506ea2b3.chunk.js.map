{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","sprintObjectives","setSprintObjectives","yesterdayObjectives","setYesterdayObjectives","todayObjectives","setTodayObjectives","warnings","setWarnings","dailyLog","setDailyLog","useEffect","createDailyLog","rawDailyLog","getActualDate","Date","className","Container","TextField","label","multiline","defaultValue","onChange","event","newValue","target","value","date","setDate","getDate","String","getYesterdayDateString","getActualDateString","disabled","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAmIeA,MA/Hf,WACE,MAAgDC,mBAAS,qBAAzD,mBAAOC,EAAP,KAAyBC,EAAzB,KACA,EAAsDF,mBAAS,IAA/D,mBAAOG,EAAP,KAA4BC,EAA5B,KACA,EAA8CJ,mBAAS,IAAvD,mBAAOK,EAAP,KAAwBC,EAAxB,KACA,EAAgCN,mBAAS,aAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAgCR,mBAAS,IAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KACA,EAA4CV,oBAAS,GAArD,6BAEAW,qBAAU,cAGP,CAACR,IAEJ,IAAMS,EAAiB,WACrB,IAAIC,EAAc,GAYlB,OAXAA,GAAe,0BACfA,GAAeZ,EACfY,GAAe,OACfA,GAAe,UACfA,GAAeV,EACfU,GAAe,OACfA,GAAe,SACfA,GAAeR,EACfQ,GAAe,OACfA,GAAe,cACfA,GAAeN,GAIjBI,qBAAU,WACRD,EAAYE,QAGdD,qBAAU,WACRD,EAAYE,OACX,CAACX,EAAkBE,EAAqBE,EAAiBE,IAE5D,IAAMO,EAAgB,WAEpB,OADa,IAAIC,MA6CnB,OACE,qBAAKC,UAAU,MAAf,SACE,eAACC,EAAA,EAAD,WACE,8CAEA,eAACA,EAAA,EAAD,WACE,sDACA,cAACC,EAAA,EAAD,CAAWC,MAAM,uBAAuBC,WAAS,EAACC,aAAcpB,EAAkBqB,SArClD,SAACC,GACvC,IAAMC,EAAWD,EAAME,OAAOC,MAC9BxB,EAAoBsB,SAsChB,eAACP,EAAA,EAAD,WACE,uCA/CuB,WAC7B,IAAMU,EAAOb,IAEb,OADAa,EAAKC,QAAQD,EAAKE,UAAY,GACvBC,OAAOH,GA4CEI,MACV,cAACb,EAAA,EAAD,CAAWC,MAAM,OAAOC,WAAS,EAACE,SArCT,SAACC,GAChC,IAAMC,EAAWD,EAAME,OAAOC,MAC9BtB,EAAuBoB,SAsCnB,eAACP,EAAA,EAAD,WACE,sCAzDoB,WAC1B,IAAMU,EAAOb,IACb,OAAOgB,OAAOH,GAuDCK,MACT,cAACd,EAAA,EAAD,CAAWC,MAAM,MAAMC,WAAS,EAACE,SArCZ,SAACC,GAC5B,IAAMC,EAAWD,EAAME,OAAOC,MAC9BpB,EAAmBkB,SAsCf,eAACP,EAAA,EAAD,WACE,+DACA,cAACC,EAAA,EAAD,CAAWC,MAAM,gCAAgCC,WAAS,EAACC,aAAcd,EAAUe,SArC3D,SAACC,GAC/B,IAAMC,EAAWD,EAAME,OAAOC,MAC9BlB,EAAYgB,SAsCR,eAACP,EAAA,EAAD,WACE,2CACA,cAACC,EAAA,EAAD,CAAWC,MAAM,YAAYC,WAAS,EAACM,MAAOjB,EAAUwB,UAAQ,EAACC,GAAG,YAApE,SACGzB,OAIL,cAACQ,EAAA,EAAD,UAKE,4CChHKkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.506ea2b3.chunk.js","sourcesContent":["import './App.css';\nimport { Button, Container, TextField, Snackbar } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  const [sprintObjectives, setSprintObjectives] = useState('- primer objetivo');\n  const [yesterdayObjectives, setYesterdayObjectives] = useState('');\n  const [todayObjectives, setTodayObjectives] = useState('');\n  const [warnings, setWarnings] = useState('- warning');\n  const [dailyLog, setDailyLog] = useState('');\n  const [showCopySucess, setShowCopySucess] = useState(false);\n\n  useEffect(() => {\n    // get users\n    const users = yesterdayObjectives;\n  }, [yesterdayObjectives]);\n\n  const createDailyLog = () => {\n    let rawDailyLog = '';\n    rawDailyLog += 'Objetivos del sprint:\\n'\n    rawDailyLog += sprintObjectives;\n    rawDailyLog += '\\n\\n'\n    rawDailyLog += 'Ayer:\\n'\n    rawDailyLog += yesterdayObjectives;\n    rawDailyLog += '\\n\\n'\n    rawDailyLog += 'Hoy:\\n'\n    rawDailyLog += todayObjectives;\n    rawDailyLog += '\\n\\n'\n    rawDailyLog += 'Warnings:\\n'\n    rawDailyLog += warnings;\n    return rawDailyLog;\n  }\n\n  useEffect(() => {\n    setDailyLog(createDailyLog());\n  });\n\n  useEffect(() => {\n    setDailyLog(createDailyLog());\n  }, [sprintObjectives, yesterdayObjectives, todayObjectives, warnings]);\n\n  const getActualDate = () => {\n    const date = new Date();\n    return date;\n  }\n\n  const getActualDateString = () => {\n    const date = getActualDate();\n    return String(date);\n  }\n\n  const getYesterdayDateString = () => {\n    const date = getActualDate();\n    date.setDate(date.getDate() - 1)\n    return String(date);\n  }\n\n  const onChangeSprintObjectivesHandler = (event) => {\n    const newValue = event.target.value;\n    setSprintObjectives(newValue);\n  }\n\n  const onChangeYesterdayHandler = (event) => {\n    const newValue = event.target.value;\n    setYesterdayObjectives(newValue);\n  }\n\n  const onChangeTodayHandler = (event) => {\n    const newValue = event.target.value;\n    setTodayObjectives(newValue);\n  }\n\n  const onChangeWarningsHandler = (event) => {\n    const newValue = event.target.value;\n    setWarnings(newValue);\n  }\n\n  const onClickCopyHandler = () => {\n    // TODO: fix code\n    var copyTextarea = document.querySelector('#daily-log');\n    copyTextarea.focus();\n    copyTextarea.select();\n    debugger;\n    var successful = document.execCommand('copy');\n    setShowCopySucess(successful);\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <h1>Daily Logger</h1>\n\n        <Container>\n          <h3>Objetivos del sprint</h3>\n          <TextField label=\"Objetivos del sprint\" multiline defaultValue={sprintObjectives} onChange={onChangeSprintObjectivesHandler}></TextField>\n        </Container>\n\n        <Container>\n          <h3>Ayer {getYesterdayDateString()}</h3>\n          <TextField label=\"Ayer\" multiline onChange={onChangeYesterdayHandler}></TextField>\n        </Container>\n\n        <Container>\n          <h3>Hoy {getActualDateString()}</h3>\n          <TextField label=\"Hoy\" multiline onChange={onChangeTodayHandler}></TextField>\n        </Container>\n\n        <Container>\n          <h3>Warnings/Blockers/Comentarios</h3>\n          <TextField label=\"Warnings/Blockers/Comentarios\" multiline defaultValue={warnings} onChange={onChangeWarningsHandler}></TextField>\n        </Container>\n\n        <Container>\n          <h3>Daily Log</h3>\n          <TextField label=\"Daily log\" multiline value={dailyLog} disabled id=\"daily-log\">\n            {dailyLog}\n          </TextField>\n        </Container>\n\n        <Container>\n          {/* <Button variant=\"contained\" color=\"primary\" onClick={onClickCopyHandler}>\n            Copiar\n          </Button>\n          <Snackbar message=\"copy sucess\" open={showCopySucess} /> */}\n          <p>---</p>\n        </Container>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}